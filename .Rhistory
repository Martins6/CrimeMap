h$layer
h@
h$hello <- 1:100#fitted(fit.glm)
h@file
h@data
h@extent
h@z
h@nrows
h@ncols
h <- raster(Oromia)
Oromia
Oromia$VARNAME_1
nrow(Oromia)
nrow(Oromia)
ncol(Oromia)
ncol(Oromia)
Oromia$GID_0
Oromia$NAME_0
Oromia$HASC_1
Oromia$VARNAME_1
Oromia$NAME_1
Oromia$TYPE_1
Oromia %>% plot()
h <- raster(Oromia)
h@
fitted(fit.glm)
h@title
h@z
h@history
fitted(fit.glm)
?raster()
h <- raster(Oromia, ncols = 100, nrows = 100)
h <- raster(Oromia, ncols = 100, nrows = 100)
h$hello <- 1:10000#fitted(fit.glm)
h %>% plot()
lines(Oromia)
iinstall.packages('fPortfolio')
install.packages('fPortfolio')
setwd("~/Documents/CrimeMap")
# Malaria Data
ETH_malaria_data <- read.csv("https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv", header=T) # Case data
# Geographical Data
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1)
Oromia <- subset(ETH_Adm_1, NAME_1=="Oromia")
# Plot both country and data points
raster::plot(Oromia)
points(ETH_malaria_data$longitude, ETH_malaria_data$latitude,
pch = 16, ylab = "Latitude", xlab="Longitude", col="red", cex=.5)
fit.glm <- glm(cbind(pf_pos, examined - pf_pos) ~ latitude + longitude, data=ETH_malaria_data, family=binomial())
fit.glm %>% summary()
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
h$hello <- 1:10000#fitted(fit.glm)
h %>% plot()
lines(Oromia)
setwd("~/Documents/CrimeMap")
library(raster)
library(dplyr)
library(sp)
library(spaMM)
# Malaria Data
ETH_malaria_data <- read.csv("https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv", header=T) # Case data
# Geographical Data
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1)
Oromia <- subset(ETH_Adm_1, NAME_1=="Oromia")
# Plot both country and data points
raster::plot(Oromia)
points(ETH_malaria_data$longitude, ETH_malaria_data$latitude,
pch = 16, ylab = "Latitude", xlab="Longitude", col="red", cex=.5)
fit.glm <- glm(cbind(pf_pos, examined - pf_pos) ~ latitude + longitude, data=ETH_malaria_data, family=binomial())
fit.glm %>% summary()
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
h$hello <- 1:10000#fitted(fit.glm)
h %>% plot()
lines(Oromia)
h$hello
h$hello@z
h@filename
h@layers
h@crs
h@rotation
h@extent
h$hello
h$hello %>% points()
h$hello %>% lines()
xmn(h)
getValues(h)
extract(h)
setValues(h)
setValues(1f)
setValues(1)
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
#h$hello <- 1:10000#fitted(fit.glm)
h %>% plot()
lines(Oromia)
lines(Oromia)
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
lines(Oromia)
#h$hello <- 1:10000#fitted(fit.glm)
h %>% plot()
lines(Oromia)
a <- predict(fit.glm, h, type = 'response')
a <- predict(h,fit.glm, type = 'response')
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
h$hello <- 1:10000#fitted(fit.glm)
h %>% plot()
lines(Oromia)
a <- predict(h, fit.glm, type = 'response')
fit.glm <- glm(cbind(pf_pos, examined - pf_pos) ~ 1, data=ETH_malaria_data, family=binomial())
# Plotting method number 1
h <- raster(Oromia, ncols = 100, nrows = 100)
h$hello <- 1:10000 #fitted(fit.glm)
a <- predict(h, fit.glm, type = 'response')
a %>% plot()
mask(a, Oromia)
mask(a, Oromia) %>% plot()
# Fitting number 2
fit.glmm <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ Matern(1|latitude+longitude), data=ETH_malaria_data, family=binomial())
summary(glm_mod_2_spatial)
summary(fit.glmm)
# Fitting number 2
fit.glmm <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ 1 + Matern(1|latitude+longitude), data=ETH_malaria_data, family=binomial())
summary(fit.glmm)
# Fitting number 2
fit.glmm <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~  Matern(1|latitude+longitude), data=ETH_malaria_data, family=binomial())
summary(fit.glmm)
# Fitting number 2
fit.glmm <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ 1 + Matern(1|latitude+longitude), data=ETH_malaria_data, family=binomial())
extent(Oromia)
nrow(Oromia)
ncol(Oromia)
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster(nrows = nrow(Oromia),
ncols = ncol(Oromia),
ext = extent(Oromia))
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
# Now create a final prediction stack of the 4 variables we need
pred_stack <- stack(longitude_raster,
latitude_raster)
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("longitude", "latitude")
plot(pred_stack)
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster(nrows = 100,
ncols = 100,
ext = extent(Oromia))
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
# Now create a final prediction stack of the 4 variables we need
pred_stack <- stack(longitude_raster,
latitude_raster)
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("longitude", "latitude")
plot(pred_stack)
summary(fit.glmm)
predicted_prevalence_raster <- predict(pred_stack, fit.glmm)
plot(predicted_prevalence_raster)
lines(Oromia)
predicted_prevalence_raster_oromia <- mask(predicted_prevalence_raster, Oromia)
plot(predicted_prevalence_raster_oromia)
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster(nrows = 1000,
ncols = 1000,
ext = extent(Oromia))
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
# Now create a final prediction stack of the 4 variables we need
pred_stack <- stack(longitude_raster,
latitude_raster)
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("longitude", "latitude")
plot(pred_stack)
predicted_prevalence_raster <- predict(pred_stack, fit.glmm)
plot(predicted_prevalence_raster)
lines(Oromia)
predicted_prevalence_raster_oromia <- mask(predicted_prevalence_raster, Oromia)
plot(predicted_prevalence_raster_oromia)
library(tidyverse)
# Spatial Data Manipulation
library(sp)
library(sf)
library(spatstat)
library(rgdal)
library(maptools)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2016.csv")
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'São Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3) %>%
filter(Bairros == 'Se')
# Calculating bounding box for further wrangling
boundbox.sp <- sp.sf$geometry %>% sf::as_Spatial() %>% bbox()
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us exclude the points that are not in the bounding box of the City of São Paulo
filter(between(latitude, boundbox.sp[2,1], boundbox.sp[2,2]) &
between(longitude, boundbox.sp[1,1], boundbox.sp[1,2])) %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
# Selecting what type of crime
crime <- crime.t %>%
filter(rubrica == 'Roubo (art. 157)')
# Let us put our crime dataset into a proper spatial format for point patterns
crime.sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
crime.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
#zone <- 23
#crime.sp <- spTransform(crime.sp, CRS(paste("+proj=utm +zone=",zone,"+datum=WGS84", sep = '')))
crime.sp <- crime.sp@coords %>% SpatialPoints()
crime.sp
# Malaria Data
ETH_malaria_data <- read.csv("https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv", header=T) # Case data
ETH_malaria_data
ETH_malaria_data %>% glimpse()
ETH_malaria_data$pf_pos
ETH_malaria_data$examined
crime.sp
crime.sp
crime.sp@bbox
crime.sp
sp.sf %>% as_Spatial()
sp.sp <- sp.sf %>% as_Spatial()
sp.sp %>% plot()
sp.sp
# The object of our region
sp.sp
# The object of our region. Let's pick up the bounding box and divide those regions into h^2 squares.
sp.sp@bbox
# Pick up the bounding box and divide those regions into h^2 squares.
bbox.region <- sp.sp@bbox
bbox.region
# Pick up the bounding box and divide those regions into h^2 squares.
bbox.region <- sp.sp@bbox %>% as.data.frame()
bbox.region
bbox.region
bbox.region[,-1]
bbox.region[,1]
bbox.region[,1]
# The point object
crime.sp <- crime.sp@coords %>% SpatialPoints()
# The region object
sp.sp <- sp.sf %>% as_Spatial()
sp.sp
crime.sp
crime.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
# The point object
crime.sp
# The point object
crime.sp %>% summary()
# The region object
sp.sp <- sp.sf %>% as_Spatial()
sp.sp
sp.sp %>% summary()
sp.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
sp.sp
sp.sp %>% summary()
# The region object
sp.sp %>% summary()
# The point object
crime.sp %>% summary()
# The region object
sp.sp %>% summary()
# The point object
crime.sp %>% summary()
# The region object
sp.sp %>% summary()
# Pick up the bounding box and divide those regions into h^2 squares.
bbox.region <- sp.sp@bbox %>% as.data.frame()
# x region
bbox.region[,1]
# x region
bbox.region[1,]
# longitude region divided
seq(bbox.region[1,], l = 10)
# longitude region divided
seq(bbox.region[1,1], bbox.region[1,2], l = 10)
# The region object
sp.sp %>% summary()
# longitude region divided
seq(bbox.region[1,1], bbox.region[1,2], l = 10)
# latitude region divided
seq(bbox.region[2,1], bbox.region[2,2], l = 10)
## Creating the datafram with those new coordinates
h.region <- tibble(longitude = long,
latitude = lat)
## longitude region divided
long <- seq(bbox.region[1,1], bbox.region[1,2], l = 10)
## latitude region divided
lat <- seq(bbox.region[2,1], bbox.region[2,2], l = 10)
## Creating the datafram with those new coordinates
h.region <- tibble(longitude = long,
latitude = lat)
h.region
h.region %>% ggplot(aes(x = latitude, y = longitude)) + geom_point()
## Creating the datafram with those new coordinates
expand.grid(seq(bbox.region[1,1], bbox.region[1,2], l = 10),
seq(bbox.region[2,1], bbox.region[2,2], l = 10))
## Creating the datafram with those new coordinates
expand.grid(seq(bbox.region[1,1], bbox.region[1,2], l = 10),
seq(bbox.region[2,1], bbox.region[2,2], l = 10)) %>%
as_tibble()
## Creating the datafram with those new coordinates
expand.grid(seq(bbox.region[1,1], bbox.region[1,2], l = 10),
seq(bbox.region[2,1], bbox.region[2,2], l = 10)) %>%
as_tibble() %>%
rename(longitude = Var1,
latitude = Var2)
## Creating the datafram with those new coordinates
h.region <- expand.grid(seq(bbox.region[1,1], bbox.region[1,2], l = 10),
seq(bbox.region[2,1], bbox.region[2,2], l = 10)) %>%
as_tibble() %>%
rename(longitude = Var1,
latitude = Var2)
## Creating the dataframe with those new coordinates
h.region <- expand.grid(seq(bbox.region[1,1], bbox.region[1,2], l = 10),
seq(bbox.region[2,1], bbox.region[2,2], l = 10)) %>%
as_tibble() %>%
rename(longitude = Var1,
latitude = Var2)
h.region %>% ggplot() + geom_point(aes(x = latitude, y = longitude))
# Forecasting Crime
fit.glmm <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ 1 + Matern(1|latitude+longitude), data=ETH_malaria_data, family=binomial())
# Checking
h.region %>% ggplot(aes(x = latitude, y = longitude)) +
geom_point()
# The region object
sp.sp %>% summary()
bbox.region
h.region$longitude %>% min()
# The point object
crime.sp %>% crime.sp %>% as('ppp')
# The point object
crime.sp %>%as('ppp')
# The point object
crime.sp %>% as('ppp')
# Let us put our crime dataset into a proper spatial format for point patterns
crime.sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
# The point object
crime.sp %>% as('ppp')
crime.sp
crime.sp %>% class()
# The point object
crime.sp %>% as('ppp')
crime.sp %>% class()
# The point object
ppp(crime.sp)
library(spatstat)
library(spatstat)
# The point object
ppp(crime.sp)
# The point object
crime.sp
# The point object
crime.sp %>% class()
# The point object
crime.sp %>% as('ppp')
# The point object
h <- crime.sp %>% as('ppp')
h %>% class()
# The point object
crime.ppp %>% summary())
# The point object
crime.ppp %>% summary()
crime.ppp <- crime.sp %>% as('ppp')
# The point object
crime.ppp %>% summary()
# The region object
sp.sp %>% summary()
crime.ppp
crime.ppp %>% rescale()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h)
# How many parts to divide the region?
h <- 10
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h)
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% class()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h)
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% view()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% as.matrix()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% as.matrix() %>% view()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% as.data.frame()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% as.data.frame() %>% glimpse()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h)
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h)
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% plot9
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% plot()
# How many parts to divide the region?
h <- 100
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% plot()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% head() %>% plot()
# Divinding the region
quadratcount(crime.ppp, nx = h, ny = h) %>% head()
# Divinding the region
a <- quadratcount(crime.ppp, nx = h, ny = h)
a[1,1]
a[1,2]
a[1,]
a[1,] %>% sum()
intensity(a)
intensity(a) %>% plot()
intensity(a) %>% plot()
print(a)
b <- intensity(a) %>% plot()
b <- intensity(a)
b
b[1,] %>% sum()
b[1,]
# Divinding the region
a <- quadratcount(crime.ppp, nx = h, ny = h)
a
a %>% plot()
# Divinding the region
a <- quadratcount(crime.ppp, nx = h, ny = h)
# Divinding the region
a <- quadratcount(crime.ppp, nx = h, ny = h) %>%
as_tibble()
a %>% glimpse()
str_split("[-23.5361,-23.5359]", '[')
str_split("[-23.5361,-23.5359]", '[]')
str_split("[-23.5361,-23.5359]", '2')
str_split("[-23.5361,-23.5359]", '\[')
str_split("[-23.5361,-23.5359]", "\[")
str_split("[-23.5361,-23.5359]", "-")
# How many parts to divide the region?
h <- 100
?slrm()
slrm(crime.ppp ~ 1 + x + y)
fit <- slrm(crime.ppp ~ 1 + x + y)
fit %>% plot()
fit %>% logLik()
fit %>% resid()
fit %>% predict()
fit %>% predict() %>% plot()
a <- fit %>% predict()
a$xcol
a$yrow
a$xstep
a$units
a$dim
a$v
crime.ppp <- rescale(crime.ppp, 1000)
fit <- slrm(crime.ppp ~ 1 + x + y)
a <- fit %>% predict()
a$v
# Let us put our crime dataset into a proper spatial format for point patterns
crime.sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
crime.ppp <- crime.sp %>% as('ppp')
crime.ppp <- rescale(crime.ppp, 1/1000)
fit <- slrm(crime.ppp ~ 1 + x + y)
a <- fit %>% predict()
a$v
a %>% plot()
# The point object
crime.ppp %>% summary()
# Divinding the region
a <- quadratcount(crime.ppp, nx = h, ny = h) %>%
as_tibble()
# Let us put our crime dataset into a proper spatial format for point patterns
crime.sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
crime.ppp <- crime.sp %>% as('ppp')
# How many parts to divide the region?
h <- 100
# Divinding the region
a <- quadratcount(crime.ppp, nx = h, ny = h) %>%
as_tibble()
a[1,]
crime.ppp
a[nrow(a),]
