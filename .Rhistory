b <- timeSeries(a)
b
ewSpec <- portfolioSpec()
nAssets <- ncol(lppData)
a <- stocks_calculations %>% select(-VQ, -Ret) %>% pivot_wider(names_from = name, values_from = PRet)
a <- a %>% select(-Data)
lppData <- timeSeries(a)
ewSpec <- portfolioSpec()
nAssets <- ncol(lppData)
setWeights(ewSpec) <- rep(1/nAssets, times = nAssets)
ewPortfolio <- feasiblePortfolio(
data = lppData,
spec = ewSpec,
constraints = "LongOnly")
print(ewPortfolio)
col <- divPalette(ncol(lppData), "RdBu")
weightsPie(ewPortfolio, radius = 0.7, col = col)
mtext(text = "Equally Weighted MV Portfolio", side = 3, line = 1.5,
font = 2, cex = 0.7, adj = 0)
weightedReturnsPie(ewPortfolio, radius = 0.7, col = col)
mtext(text = "Equally Weighted MV Portfolio", side = 3, line = 1.5,
font = 2, cex = 0.7, adj = 0)
covRiskBudgetsPie(ewPortfolio, radius = 0.7, col = col)
mtext(text = "Equally Weighted MV Portfolio", side = 3, line = 1.5,
font = 2, cex = 0.7, adj = 0)
?covRiskBudgetsPie
globminSpec <- portfolioSpec()
globminPortfolio <- minvariancePortfolio(
data = lppData,
spec = globminSpec,
constraints = "LongOnly")
print(globminPortfolio)
plot(globminPortfolio)
plot(globminPortfolio)
plot(globminPortfolio)
tgPortfolio <- tangencyPortfolio(
data = lppData,
spec = tgSpec,
constraints = "LongOnly")
tgSpec <- portfolioSpec()
setRiskFreeRate(tgSpec) <- 0
tgPortfolio <- tangencyPortfolio(
data = lppData,
spec = tgSpec,
constraints = "LongOnly")
print(tgPortfolio)
plot(tgPortfolio)
plot(tgPortfolio)
plot(tgPortfolio)
print(tgPortfolio)
tgPortfolio@portfolio
globminPortfolio <- minvariancePortfolio(
data = lppData,
spec = globminSpec,
constraints = "shortOnly")
print(globminPortfolio)
plot(globminPortfolio)
print(globminPortfolio)
print(tgPortfolio)
boxConstraints <- c(
"minW[4]=0.1")
tgSpec <- portfolioSpec()
setRiskFreeRate(tgSpec) <- 0
boxConstraints <- c(
"minW[4]=0.1")
tgSpec <- portfolioSpec()
setRiskFreeRate(tgSpec) <- 0
boxConstraints <- c(
"minW[4]=0.1")
tgSpec <- portfolioSpec()
setRiskFreeRate(tgSpec) <- 0
boxConstraints <- c(
"minW[4]=0.1")
tgPortfolio <- tangencyPortfolio(
data = lppData,
spec = tgSpec,
constraints = boxConstraints)
print(tgPortfolio)
longFrontier <- portfolioFrontier(lppData)
plot(longFrontier)
longFrontier@portfolio
longFrontier@data
longFrontier@constraints
longFrontier@title
b <- plot(longFrontier)
b
b %>% plot()
frontierPlot(longFrontier)
frontierPlot(longFrontier) %>% class()
a <- frontierPlot(longFrontier)
a
tangencyPoints(longFrontier)
tangencyPoints(longFrontier)
tangencyPoints(longFrontier)
frontierPlot(longFrontier)
tangencyPoints(longFrontier)
tangencyPoints(longFrontier, colour = 'red')
tangencyPoints(longFrontier) %>% class()
tangencyPoints(longFrontier) %>% class()
tangencyPoints(longFrontier)
frontierPlot(longFrontier)
tangencyPoints(longFrontier)
longFrontier <- portfolioFrontier(lppData)
frontierPlot(longFrontier)
tangencyPoints(longFrontier)
a <- tangencyPoints(longFrontier)
a
frontierPlot(longFrontier) %>% as_tibble()
tangencyPoints(longFrontier) %>% as_tibble()
tangencyLines(longFrontier) %>% as_tibble()
singleAssetPoints(longFrontier) %>% as_tibble()
longFrontier
longFrontier@portfolio
longFrontier@portfolio@portfolio
longFrontier@portfolio@portfolio$status
longFrontier@data@data$names
frontierPlot(longFrontier) %>% as_tibble()
tangencyPoints(longFrontier) %>% as_tibble()
tangencyLines(longFrontier) %>% as_tibble()
singleAssetPoints(longFrontier) %>% as_tibble()
longFrontier@data@data$names
frontierPlot(longFrontier) %>% as_tibble()
longFrontier@data@data$names
frontierPlot(longFrontier) %>% as_tibble()
tangencyPoints(longFrontier) %>% as_tibble()
tangencyLines(longFrontier) %>% as_tibble()
singleAssetPoints(longFrontier) %>% as_tibble()
covRiskBudgetsPlot(longFrontier)
longFrontier <- portfolioFrontier(lppData)
longFrontier@data@data$names
frontierPlot(longFrontier) %>% as_tibble()
tangencyPoints(longFrontier) %>% as_tibble()
tangencyLines(longFrontier) %>% as_tibble()
singleAssetPoints(longFrontier) %>% as_tibble()
sharpeRatioLines(longFrontier) %>% as_tibble()
longFrontier <- portfolioFrontier(lppData)
longFrontier@data@data$names
frontierPlot(longFrontier) %>% as_tibble()
sharpeRatioLines(longFrontier) %>% as_tibble()
longFrontier <- portfolioFrontier(lppData)
longFrontier@data@data$names
frontierPlot(longFrontier) %>% as_tibble()
tangencyPoints(longFrontier) %>% as_tibble()
tangencyLines(longFrontier) %>% as_tibble()
singleAssetPoints(longFrontier) %>% as_tibble()
sharpeRatioLines(longFrontier) %>% as_tibble()
boxConstraints <- c(
"minW[4]=0.1"
)
setwd("~/Documents/reciprev/sd")
# EXECUTING THE APP
#setwd("~/Documents/")
## Global
source('sd/global.R')
## UI
source('sd/ui.R')
## Server
source('sd/server.R')
shiny::shinyApp(ui, server)
setwd("~/Documents/reciprev")
# EXECUTING THE APP
#setwd("~/Documents/")
## Global
source('sd/global.R')
## UI
source('sd/ui.R')
## Server
source('sd/server.R')
shiny::shinyApp(ui, server)
# libraries
library(fPortfolio)
library(tidyverse)
library(tidyselect)
library(quantmod)
# My actual USA wallet
symbols <- c('AAPL', 'AMZN', 'TSLA', 'SQ')
weights <- c(0.25, 0.25, 0.25, 0.25)
# Constructing our Adjusted.Close dataframe with each Stock.
prices <-
# Get the data from Yahoo Finance, we will be working the names of the objects
getSymbols(symbols, src = 'yahoo', from = '2019-01-01',
auto.assign = TRUE, warnings = FALSE) %>%
# Acessing the xts objects throught the vector of names (get) and getting
# the the Adjusted.Close (Ad) of each object
map(~Ad(get(.)))
# Collecting the vector of dates from the xts object.
Data <- prices[[1]] %>% index()
# Trasnforming from xts to tibble.
prices <- prices %>%
as_tibble(.name_repair = 'unique') %>%
`colnames<-`(symbols) %>%
mutate_all(~as.vector(.)) %>%
mutate(Data = Data) %>%
drop_na()
# Adjusting tibble
prices1 <- prices %>%
drop_na() %>%
pivot_longer(cols = any_of(symbols)) %>%
rename(VQ = value)
# Calculating what we want from each stock and storing
a <- prices1 %>%
group_by(name) %>%
# Prices Return
mutate(Ret = VQ - lag(VQ),
PRet = if_else(VQ != 0,
( VQ - lag(VQ) ) / lag(VQ),
NA_real_)) %>%
select(-VQ, -Ret) %>%
pivot_wider(names_from = name, values_from = PRet) %>%
select(-Data)
a
a %>% is.na()
a[-1,]
# Calculating what we want from each stock and storing
a <- prices1 %>%
group_by(name) %>%
# Prices Return
mutate(Ret = VQ - lag(VQ),
PRet = if_else(VQ != 0,
( VQ - lag(VQ) ) / lag(VQ),
NA_real_)) %>%
select(-VQ, -Ret) %>%
pivot_wider(names_from = name, values_from = PRet) %>%
select(-Data) %>%
slice(-1)
a
# Calculating what we want from each stock and storing
a <- prices1 %>%
group_by(name) %>%
# Prices Return
mutate(Ret = VQ - lag(VQ),
PRet = if_else(VQ != 0,
( VQ - lag(VQ) ) / lag(VQ),
NA_real_)) %>%
select(-VQ, -Ret) %>%
pivot_wider(names_from = name, values_from = PRet) %>%
select(-Data) %>%
drop_na()
a
# Putting into the standard format for the fPortfolio pckg
lppData <- timeSeries(a)
a
lppData
# Specifications for the building the Portfolio
ewSpec <- portfolioSpec()
nAssets <- ncol(lppData)
setWeights(ewSpec) <- rep(1/nAssets, times = nAssets)
# Creating the portfolio
ewPortfolio <- feasiblePortfolio(
data = lppData,
spec = ewSpec,
# Weight boundary between 0 and 1
constraints = "LongOnly")
print(ewPortfolio)
setwd("~/Documents/CrimeMap")
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
sp.sf$Bairros
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2016.csv")
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2016.csv")
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', '')) %>%
filter(rubrica == 'Roubo (art. 157)')
crime.t
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', '')) %>%
filter(rubrica == 'Roubo (art. 157)') %>%
select(-mes, -rubrica)
crime.t
write_rds(crime.t, path = 'data/crime_types.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2016.csv")
crime %>% mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
crime %>%
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
hey <- crime %>%
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
write_rds(hey, path = 'data/crime_types.rds')
hey$rubrica %>% unique()
gey <- hey$rubrica %>% unique()
write_rds(gey, path = 'data/crime_types.rds')
crime_types <- readRDS("~/Documents/CrimeMap/data/crime_types.rds")
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2016.csv")
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', '')) %>%
filter(rubrica == 'Roubo (art. 157)') %>%
select(-mes, -rubrica)
crime.t %>% glimpse()
write_rds(crime.t, path = 'data/2016_roubo_data.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2015.csv")
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == '2015') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', '')) %>%
filter(rubrica == 'Roubo (art. 157)') %>%
select(-mes, -rubrica)
crime.t %>% glimpse()
write_rds(crime.t, path = 'data/2015_roubo_data.rds')
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
path.file <- paste('data/', ych, 'roubo_data.rds', sep = '')
# The geospatial data
SP <- readRDS("data/SP.rds")
View(SP)
SP %>% class()
SP %>% glimpse()
