# Constructing the following algorithm:
# 1) Create the Window for your data: a square with the neighborhood that you wish to predict.
# 2) Divide each dimensions into h equal parts, creating h^2 squares, each square with s^2 units.
# 3) Check if there is a crime into each square and atrribute one, if there is, and 0, if there isn't.
# Call that variable Z.
# 4) Fit the logistic model with GLMMM or GLGM to variable Y (assaulted, not assaulted).
# The point object
crime.ppp %>% summary()
# The region object
sp.sp %>% summary()
for (i in 1:5) {
# How many parts to divide the region in each dimension?
h <- 100 * i
# Divinding the region into quadrat or 'little squares'
qcount <- quadratcount(crime.ppp, nx = h, ny = h) %>%
as_tibble()
sp.sp
#qcount
# adapting the tibble
## Auxiliary fun
decomposing <- function(x) {
x %>%
str_replace('\\[', replacement = '') %>%
strsplit(',') %>%
unlist() %>%
first() %>%
as.numeric()
}
dt.aux <- qcount %>%
mutate(
y = unlist(lapply(y, decomposing)),
x = unlist(lapply(x, decomposing)),
crime.event = if_else(n > 0,
1,
0)
) %>%
select(-n)
dt.aux %>% write_rds(str_c(c(
'data/crime_by_square/', 'year', year, 'squares_', h, '.rds'
), collapse = ''))
}
}
# title: Probability Map!
# author: Adriel Martins
# date: 04/05/20
# ************************************************************************* #
# ***************** Libraries
# Data manipulation
library(tidyverse)
# Spatial Data Manipulation
library(sp)
library(sf)
library(rgdal)
#library(raster)
library(spatstat)
library(maptools)
library(splancs)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
for(year in c(2016, 2015)) {
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv(paste("data_pre_processed/SSP/BO_",year,".csv", sep = ''))
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'S達o Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
# Calculating bounding box for further wrangling
boundbox.sp <- sp.sf$geometry %>% sf::as_Spatial() %>% bbox()
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == as.character(year)) %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(
latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)
) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us exclude the points that are not in the bounding box of the City of S達o Paulo
filter(
between(latitude, boundbox.sp[2, 1], boundbox.sp[2, 2]) &
between(longitude, boundbox.sp[1, 1], boundbox.sp[1, 2])
) %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
# Selecting what type of crime
crime <- crime.t %>%
filter(rubrica == 'Roubo (art. 157)')
# Let us put our crime dataset into a proper spatial format for point patterns
crime.sp <-
crime %>% select(longitude, latitude) %>% SpatialPoints()
#crime.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
crime.ppp <- crime.sp %>% as('ppp')
# zone <- 23
# crime.sp <- spTransform(crime.sp, CRS(paste("+proj=utm +zone=",zone,"+datum=WGS84", sep = '')))
#crime.ppp <- crime.sp %>% as('ppp')
sp.sp <- sp.sf %>% as_Spatial()
sp.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
# zone <- 23
# sp.sp <- spTransform(sp.sp, CRS(paste("+proj=utm +zone=",zone,"+datum=WGS84", sep = '')))
########################################## CREATING OUR SQUARES MAP ###################################
# Constructing the following algorithm:
# 1) Create the Window for your data: a square with the neighborhood that you wish to predict.
# 2) Divide each dimensions into h equal parts, creating h^2 squares, each square with s^2 units.
# 3) Check if there is a crime into each square and atrribute one, if there is, and 0, if there isn't.
# Call that variable Z.
# 4) Fit the logistic model with GLMMM or GLGM to variable Y (assaulted, not assaulted).
# The point object
crime.ppp %>% summary()
# The region object
sp.sp %>% summary()
for (i in 1:5) {
# How many parts to divide the region in each dimension?
h <- 100 * i
# Divinding the region into quadrat or 'little squares'
qcount <- quadratcount(crime.ppp, nx = h, ny = h) %>%
as_tibble()
sp.sp
#qcount
# adapting the tibble
## Auxiliary fun
decomposing <- function(x) {
x %>%
str_replace('\\[', replacement = '') %>%
strsplit(',') %>%
unlist() %>%
first() %>%
as.numeric()
}
dt.aux <- qcount %>%
mutate(
y = unlist(lapply(y, decomposing)),
x = unlist(lapply(x, decomposing)),
crime.event = if_else(n > 0,
1,
0)
) %>%
select(-n)
dt.aux %>% write_rds(str_c(c(
'data/crime_by_square/', 'year', year, 'squares_', h, '.rds'
), collapse = ''))
}
}
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
?splancs::spkernel2d()
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
************** Libraries
# Data manipulation
library(tidyverse)
# Spatial Data Manipulation
library(sp)
library(sf)
library(maptools)
library(tmap)
library(spatstat)
# For webscrapping
library(rvest)
library(stringr)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSP/BO_2016.csv")
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'S達o Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
sp.sf$Bairros
# Calculating bounding box for further wrangling
boundbox.sp <- sp.sf$geometry %>% sf::as_Spatial() %>% bbox()
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime.t <- crime %>%
# Filtering just for the year at hand
filter(as.character(ANO_BO) == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us exclude the points that are not in the bounding box of the City of S達o Paulo
filter(between(latitude, boundbox.sp[2,1], boundbox.sp[2,2]) &
between(longitude, boundbox.sp[1,1], boundbox.sp[1,2])) %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
# Selecting what type of crime
crime <- crime.t %>%
filter(rubrica == 'Roubo (art. 157)')
# Let us put our crime dataset into a proper spatial format for point patterns
crime.sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
crime.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
# Transforming to UTM coordinates
zone <- 23
crime.sp <- spTransform(crime.sp, CRS(paste("+proj=utm +zone=",zone,"+datum=WGS84", sep = '')))
crime.sf <- crime.sp %>% st_as_sf()
# Also transforming the desired region
sp.sp <- sp.sf %>% as_Spatial()
sp.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
zone <- 23
sp.sp <- spTransform(sp.sp, CRS(paste("+proj=utm +zone=",zone,"+datum=WGS84", sep = '')))
sp.sf <- sp.sp %>% st_as_sf()
# Plot-checking
tm_shape(sp.sf) +
tm_fill() +
tm_shape(crime.sf[sample(1:nrow(crime.sf), 1000),]) +
tm_dots()
# Putting into the format of the 'ppp'
sp.sp <- as(sp.sf, "Spatial")
sp.sp@proj4string <- CRS(as.character(NA))
# Window of the points
window <- maptools::as.owin.SpatialPolygons(sp.sp)
# Pure crime coordinates
crime.coord <- matrix(unlist(crime.sf$geometry), ncol = 2, byrow = T)
# Checking points outside the desired region
inside.sp <- inside.owin(crime.coord[,1],
crime.coord[,2],
w = window)
# Selecting only those that fall within
crime.coord <- crime.coord[inside.sp,]
# Creating the ppp data
crime.ppp <- ppp(x = crime.coord[,1], y = crime.coord[,2],
window = window, check = T)
# Plot-checking
#crime.ppp %>% plot()
# Checking if there are multiplied points
#any(duplicated(crime.ppp))
# How much?
#sum(multiplicity(crime.ppp) > 1)
# Jitter it, so we don't lose the info
crime.ppp <- rjitter(crime.ppp, retry=TRUE, nsim=1, drop=TRUE)
crime.ppp %>% summary()
crime.ppp <- rescale(crime.ppp, 1000, 'kilometers')
###################### ******************* Kernel Density Estimation ######################
# Methods for bandwidth
# bw.ppl(crime.ppp)
# bw.diggle(crime.ppp)
# Kernel estimates
den.dig <- density(crime.ppp, sigma = bw.diggle, edge = T)
plot(den.dig, main = '')
crime.ppp %>% plot()
crime.ppp %>% plot()
sp.sf$Bairros
crime.ppp %>% plot()
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Shiny Portfolio Management
# Author: Adriel Martins
# Date: 21/19/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('app/global.R')
abc <- matrix(c(-46.6, -23.5), 1, 2)
## UI
source('app/ui.R')
## Server0
source('app/server.R')
shiny::shinyApp(ui, server)
