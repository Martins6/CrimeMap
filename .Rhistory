caption = 'source: Yahoo Finance')
ptly %>% ggplotly()
# Vizualising
## VaR
ptly <- dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec,
VaR_price = price + VaR,
ES_price = price + ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
ptly %>% ggplotly()
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
# # Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
# Computing the next step forecast
## Data
`Data Prevista` <- dt$Data %>%
last(.) + 1
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(Vol = Vol_vec,
VaR = -VaR_vec,
ES = ES_vec) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = PRet)) +
geom_path(aes(y = Vol, colour = 'Volatility')) +
geom_path(aes(y = -VaR, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = -`VaR Previsto`, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = `ES Previsto`, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
ggplotly(ply)
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
VaR_forecast = `VaR Previsto` * last(dt$price)
VaR_forecast_price = last(price) + VaR_forecast
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
VaR_forecast = `VaR Previsto` * last(dt$price)
VaR_forecast_price = last(dt$price) + VaR_forecast
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
ES_forecast = `ES Previsto` * last(dt$price)
ES_forecast_price = last(dt$price) + ES_forecast
# # Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
# Computing the next step forecast
## Data
`Data Prevista` <- dt$Data %>%
last(.) + 1
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(VaR = VaR_vec * LaggedPrice,
ES = ES_vec * LaggedPrice,
VaR_price = price + VaR,
ES_price = price + ES,
ES_forecast = `ES Previsto` * last(price)) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = VaR_price, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES_price, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = VaR_forecast_price, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = `ES Previsto`, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(VaR = VaR_vec * LaggedPrice,
ES = ES_vec * LaggedPrice,
VaR_price = price + VaR,
ES_price = price + ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = VaR_price, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES_price, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = VaR_forecast_price, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = ES_forecast_price, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
ggplotly(ply)
# EXECUTING THE APP
#setwd("~/Documents/")
## Global
source('sd/global.R')
## UI
source('sd/ui.R')
## Server
source('sd/server.R')
shiny::shinyApp(ui, server)
install.packages(c("aweek", "broom", "class", "colourvalues", "dbplyr", "DescTools", "fda", "ggfortify", "ggpubr", "git2r", "gss", "KernSmooth", "MASS", "modelr", "naniar", "openxlsx", "pillar", "pkgbuild", "raster", "RcppArmadillo", "recipes", "rematch2", "rex", "rlang", "sf", "systemfonts", "tibble", "tidyr", "timetk", "usethis", "withr", "xml2", "zoo"))
setwd("~/Documents/CrimeMap")
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
SPcrimetibble2015 <- readRDS("~/Documents/CrimeMap/data/SPcrimetibble2015.rds")
SPcrie
SPcrimetibble2015 %>% glimpse() %>% plot
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# EXECUTING THE APP
## Global
source('global.R')
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
# Title: Crime Map
# Author: Adriel Martins
# Date: 08/05/2020
# EXECUTING THE APP
## Global
source('global.R')
## UI
source('ui.R')
## Server
source('server.R')
shiny::shinyApp(ui, server)
