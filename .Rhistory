geom_hline(aes(yintercept = -VaR, colour = 'Value-at-Risk'), alpha = 0.8) +
geom_hline(aes(yintercept = Es, colour = 'Expected Shortfall'), alpha = 0.8) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red', `Expected Shortfall` = 'blue')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de Simulação Histórica',
caption = 'source: Yahoo Finance')
##################### ********** PARAMETRIC , TIME-DEPENDENT VOL., NORMAL GARCH ################
p <- 0.05
# GARCH
## Normal Distribution
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# Compute the random shock on the random part, we expect to have the same distribution as
# the conditional one we have assumed.
epsilon.t <- g@residuals/g@sigma.t
epsilon.t %>% hist(breaks = 'FD')
# Compute ES under normality
Vol_vec <- g %>% volatility()
VaR_vec <- Vol_vec * qnorm(p)
dt
####################################### READING DATA ############################
# Getting data from Yahoo Finance
symbol <- 'VGT'
## One year of data, from yesterday to one year before.
beg <- (today() - 367*3)
ending <- (today() - 1)
getSymbols(Symbols = symbol, src = 'yahoo',
from = beg, to = ending, warnings = FALSE)
# Acessing the xts objects throught the vector of names (get)
dt <- get('VGT') %>%
# and getting the the Adjusted.Close (Ad) of each object
Ad() %>%
`colnames<-`(., 'price')
# If it has missing values, use inputation of values
if(sum(is.na(dt)) != 0){
dt <- dt %>%
na.approx()
}
# Transforming XTS into Tibble for easy computation
dt <- dt %>%
tk_tbl() %>%
rename(Data = index)
# Computing the Percentual Return
dt <- dt %>%
mutate(Ret = as.vector((price - quantmod::Lag(price))),
PRet = as.vector((price - quantmod::Lag(price))/quantmod::Lag(price)),
LaggedPrice = as.vector(Lag(price)) ) %>%
# We lose the first observation
drop_na()
dt$PRet <- dt$PRet - mean(dt$PRet)
##################### ********** PARAMETRIC , TIME-DEPENDENT VOL., NORMAL GARCH ################
p <- 0.05
# GARCH
## Normal Distribution
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
## Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
ES_vec
t]
dt %>% glimpse()
# Vizualising
## VaR
dt %>%
mutate(Vol = Vol_vec,
VaR = VaR_vec,
ES = ES_vec,
VaR_price = VaR_vec * LaggedPrice,
ES_price = ES_vec * LaggedPrice) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = Vol, colour = 'vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue',
vol = 'purple')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
dt %>% glimpse()
dt$LaggedPrice
# Vizualising
## VaR
dt %>%
mutate(Vol = Vol_vec,
VaR = VaR_vec,
ES = ES_vec,
VaR_price = VaR_vec * LaggedPrice,
ES_price = ES_vec * LaggedPrice) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue',
vol = 'purple')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
# Vizualising
## VaR
dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = VaR_vec,
ES = ES_vec,
VaR_price = VaR_vec * LaggedPrice,
ES_price = ES_vec * LaggedPrice) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue',
vol = 'purple')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
dt$LaggedPrice
dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = VaR_vec,
ES = ES_vec,
VaR_price = VaR_vec * LaggedPrice,
ES_price = ES_vec * LaggedPrice)
# Vizualising
## VaR
dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = (1 - VaR_vec),
ES = (1 + ES_vec)) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR, colour = 'VP')) +
geom_path(aes(y = ES, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue',
vol = 'purple')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
# Vizualising
## VaR
dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR, colour = 'VP')) +
geom_path(aes(y = ES, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue',
vol = 'purple')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
price
dt$price
a <- dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec)
a
# Vizualising
## VaR
dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec,
VaR_price = price - VaR,
ES_price = price - ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue',
vol = 'purple')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
caption = 'source: Yahoo Finance')
# Vizualising
## VaR
dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec,
VaR_price = price - VaR,
ES_price = price - ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
ptly %>% ggplotly()
# Vizualising
## VaR
ptly <- dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec,
VaR_price = price - VaR,
ES_price = price - ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
ptly %>% ggplotly()
# Vizualising
## VaR
ptly <- dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec,
VaR_price = price + VaR,
ES_price = price + ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
ptly %>% ggplotly()
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
# # Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
# Computing the next step forecast
## Data
`Data Prevista` <- dt$Data %>%
last(.) + 1
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(Vol = Vol_vec,
VaR = -VaR_vec,
ES = ES_vec) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = PRet)) +
geom_path(aes(y = Vol, colour = 'Volatility')) +
geom_path(aes(y = -VaR, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = -`VaR Previsto`, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = `ES Previsto`, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
ggplotly(ply)
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
VaR_forecast = `VaR Previsto` * last(dt$price)
VaR_forecast_price = last(price) + VaR_forecast
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
VaR_forecast = `VaR Previsto` * last(dt$price)
VaR_forecast_price = last(dt$price) + VaR_forecast
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
ES_forecast = `ES Previsto` * last(dt$price)
ES_forecast_price = last(dt$price) + ES_forecast
# # Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
# Computing the next step forecast
## Data
`Data Prevista` <- dt$Data %>%
last(.) + 1
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(VaR = VaR_vec * LaggedPrice,
ES = ES_vec * LaggedPrice,
VaR_price = price + VaR,
ES_price = price + ES,
ES_forecast = `ES Previsto` * last(price)) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = VaR_price, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES_price, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = VaR_forecast_price, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = `ES Previsto`, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(VaR = VaR_vec * LaggedPrice,
ES = ES_vec * LaggedPrice,
VaR_price = price + VaR,
ES_price = price + ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = VaR_price, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES_price, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = VaR_forecast_price, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = ES_forecast_price, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
ggplotly(ply)
# EXECUTING THE APP
#setwd("~/Documents/")
## Global
source('sd/global.R')
## UI
source('sd/ui.R')
## Server
source('sd/server.R')
shiny::shinyApp(ui, server)
install.packages(c("aweek", "broom", "class", "colourvalues", "dbplyr", "DescTools", "fda", "ggfortify", "ggpubr", "git2r", "gss", "KernSmooth", "MASS", "modelr", "naniar", "openxlsx", "pillar", "pkgbuild", "raster", "RcppArmadillo", "recipes", "rematch2", "rex", "rlang", "sf", "systemfonts", "tibble", "tidyr", "timetk", "usethis", "withr", "xml2", "zoo"))
setwd("~/Documents/CrimeMap")
# Libraries
## Data manipulation
library(tidyverse)
## Spatial Data Manipulation
library(sf)
library(sp)
## Plotting Data
library(rgdal)
library(leaflet)
library(mapview)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSPKaagle1.csv") %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, CIDADE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.)))
#             PropWith = WithLatLongCoord/nrow(crime))
# # Cities where crime was recorded
# crime %>% pull(cidade) %>% str_to_lower() %>% unique()
# # Number of crimes in the city of Sao Paulo
# crime %>% filter(cidade == 'S.PAULO') %>% nrow()
# # Different types of crime in SP and their respective quantity
# crime %>% group_by(rubrica) %>% summarise(Count = n())
# crime$rubrica %>% unique()
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'São Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Neighborhood = NAME_3)
# Calculating bounding box for further wrangling
boundbox.sp <- sp.sf$geometry %>% sf::as_Spatial() %>% bbox()
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime <- crime %>%
# Interpreting as double the lat-long coordinates, and month as integer
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
mes = as.integer(mes)) %>%
# Dropping observations without lon-lat
drop_na()
# Let us exclude the points that are not in the bounding box of the City of São Paulo
crime <- crime %>%
filter(between(latitude, boundbox.sp[2,1], boundbox.sp[2,2]) &
between(longitude, boundbox.sp[1,1], boundbox.sp[1,2]))
crime$rubrica %>% unique()
# Let us also aggregate crime, by taking out the 'A.I'.
crime %>%
mutate(rubrica = str_replace_all(rubrica, 'A.I.', ''))
# Let us also aggregate crime, by taking out the 'A.I'.
crime %>%
mutate(rubrica = str_replace_all(rubrica, 'A.I.', '')) %>%
pull(rubrica) %>%
unique()
#   summarise(WithoutLatLongCoord = n(),
#             WithLatLongCoord = nrow(crime) - n(),
#             PropWithout = WithoutLatLongCoord/nrow(crime),
#             PropWith = WithLatLongCoord/nrow(crime))
# # Cities where crime was recorded
# crime %>% pull(cidade) %>% str_to_lower() %>% unique()
# # Number of crimes in the city of Sao Paulo
# crime %>% filter(cidade == 'S.PAULO') %>% nrow()
# # Different types of crime in SP and their respective quantity
# crime %>% group_by(rubrica) %>% summarise(Count = n())
crime$rubrica %>% unique()
#   summarise(WithoutLatLongCoord = n(),
#             WithLatLongCoord = nrow(crime) - n(),
#             PropWithout = WithoutLatLongCoord/nrow(crime),
#             PropWith = WithLatLongCoord/nrow(crime))
# # Cities where crime was recorded
# crime %>% pull(cidade) %>% str_to_lower() %>% unique()
# # Number of crimes in the city of Sao Paulo
# crime %>% filter(cidade == 'S.PAULO') %>% nrow()
# # Different types of crime in SP and their respective quantity
# crime %>% group_by(rubrica) %>% summarise(Count = n())
crime$rubrica %>% unique()
# Let us also aggregate crime, by taking out the 'A.I'.
crime %>%
mutate(rubrica = str_replace_all(rubrica, 'A.I.', '')) %>%
pull(rubrica) %>%
unique()
# Let us also aggregate crime, by taking out the 'A.I'.
crime %>%
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', '')) %>%
pull(rubrica) %>%
unique()
