install.packages(c("geojsonsf", "ggforce", "gower", "patchwork", "recipes"))
setwd("~/Documents/CrimeMap")
anipulation
library(tidyverse)
# Spatial Data Manipulation
library(sp)
library(sf)
library(rgdal)
library(raster)
library(spatstat)
library(maptools)
library(splancs)
#                          family = binomial(link = "logit"),
#                          method = 'PQL/L')
# t1 <- Sys.time()
# print(t1 - t0)
#
# summary(fit.glmm)
#
# resid(fit.glmm)^2 %>% sum()
########################################### GLM + Geostatistic ####################################
# ############## ************* GLM #############
dt.aux <- read_rds('data_processed.rds') %>%
sample_frac(0.75)
?I()
?poly()
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x^2 + x + y + y^2,
data = dt.aux,
family = binomial(link = "logit"))
summary(fit.glm)
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x + y,
data = dt.aux,
family = binomial(link = "logit"))
summary(fit.glm)
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + 2*x + y,
data = dt.aux,
family = binomial(link = "logit"))
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + 2x + y,
data = dt.aux,
family = binomial(link = "logit"))
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + 2x + y,
data = dt.aux,
family = binomial(link = "logit"))
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x^2 + y,
data = dt.aux,
family = binomial(link = "logit"))
summary(fit.glm)
#                          family = binomial(link = "logit"),
#                          method = 'PQL/L')
# t1 <- Sys.time()
# print(t1 - t0)
#
# summary(fit.glmm)
#
# resid(fit.glmm)^2 %>% sum()
########################################### GLM + Geostatistic ####################################
# ############## ************* GLM #############
dt.aux <- read_rds('data_processed.rds') %>%
sample_frac(0.75) %>%
mutate(x2 = x^2,
y2 = y^2)
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x2 + x + y + y2,
data = dt.aux,
family = binomial(link = "logit"))
summary(fit.glm)
########################################### PLOTTING ####################################
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster::raster(nrows = 500,
ncols = 500,
ext = raster::extent(sp.sp))
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'São Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
sp.sp <- sp.sf %>% as_Spatial()
# title: Probability Map!
# author: Adriel Martins
# date: 04/05/20
# ************************************************************************* #
# ***************** Libraries
# Data manipulation
library(tidyverse)
# Spatial Data Manipulation
library(sp)
library(sf)
library(rgdal)
#library(raster)
library(spatstat)
library(maptools)
library(splancs)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'São Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
sp.sp <- sp.sf %>% as_Spatial()
sp.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
#                          family = binomial(link = "logit"),
#                          method = 'PQL/L')
# t1 <- Sys.time()
# print(t1 - t0)
#
# summary(fit.glmm)
#
# resid(fit.glmm)^2 %>% sum()
########################################### GLM + Geostatistic ####################################
# ############## ************* GLM #############
dt.aux <- read_rds('data_processed.rds') %>%
sample_frac(0.75) %>%
mutate(x2 = x^2,
y2 = y^2)
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x2 + x + y + y2,
data = dt.aux,
family = binomial(link = "logit"))
########################################### PLOTTING ####################################
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster::raster(nrows = 500,
ncols = 500,
ext = raster::extent(sp.sp))
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
plot(longitude_raster)
# Now create a final prediction stack of the 4 variables we need
pred_stack <- raster::stack(longitude_raster,
latitude_raster)
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("x", "y")
plot(pred_stack)
#plot(pred_stack)
predicted_raster <- raster::predict(pred_stack, fit.glm, type = 'response')
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("x", 'x2', "y", 'y2')
########################################### PLOTTING ####################################
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster::raster(nrows = 500,
ncols = 500,
ext = raster::extent(sp.sp))
sp.sp
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
lo2_r[] <- coordinates(longitude_raster)[,1]
la2_r[] <- coordinates(longitude_raster)[,1]
########################################### PLOTTING ####################################
# Create an empty raster with the same extent and resolution as the bioclimatic layers
la2_r <- lo2_r<- latitude_raster <- longitude_raster <- raster::raster(nrows = 500,
ncols = 500,
ext = raster::extent(sp.sp))
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
lo2_r[] <- coordinates(longitude_raster)[,1]
la2_r[] <- coordinates(longitude_raster)[,1]
plot(longitude_raster)
# Now create a final prediction stack of the 4 variables we need
pred_stack <- raster::stack(longitude_raster,
lo2_r,
latitude_raster,
la2_r)
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("x", 'x2', "y", 'y2')
plot(pred_stack)
#plot(pred_stack)
predicted_raster <- raster::predict(pred_stack, fit.glm, type = 'response')
plot(predicted_raster)
#                          family = binomial(link = "logit"),
#                          method = 'PQL/L')
# t1 <- Sys.time()
# print(t1 - t0)
#
# summary(fit.glmm)
#
# resid(fit.glmm)^2 %>% sum()
########################################### GLM + Geostatistic ####################################
# ############## ************* GLM #############
dt.aux <- read_rds('data_processed.rds') %>%
sample_frac(0.75)
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x + y,
data = dt.aux,
family = binomial(link = "logit"))
summary(fit.glm)
res.aux <- dt.aux %>% mutate(Resid = resid(fit.glm),
Fitted = fitted(fit.glm))
res.aux %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Fitted))
########################################### PLOTTING ####################################
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster::raster(nrows = 500,
ncols = 500,
ext = raster::extent(sp.sp))
# Change the values to be latitude and longitude respectively
longitude_raster[] <- coordinates(longitude_raster)[,1]
latitude_raster[] <- coordinates(latitude_raster)[,2]
plot(longitude_raster)
# Now create a final prediction stack of the 4 variables we need
pred_stack <- raster::stack(longitude_raster,
latitude_raster)
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("x", 'x2', "y", 'y2')
# Rename to ensure the names of the raster layers in the stack match those used in the model
names(pred_stack) <- c("x","y")
plot(pred_stack)
#plot(pred_stack)
predicted_raster <- raster::predict(pred_stack, fit.glm, type = 'response')
#plot(pred_stack)
predicted_raster <- raster::predict(pred_stack, fit.glm, type = 'response')
plot(predicted_raster)
# lines(sp.sp)
predicted_raster_in_map <- raster::mask(predicted_raster, sp.sp)
plot(predicted_raster_in_map)
res.aux %>%
sample_frac(0.2) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Fitted))
res.aux %>%
sample_frac(0.1) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Fitted))
res.aux %>%
sample_frac(0.05) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Fitted))
res.aux %>%
sample_frac(0.05) %>%
dim
res.aux
res.aux %>%
sample_frac(0.05) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid))
res.aux %>%
sample_frac(1) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid))
fit.glm <- step(fit.glm)
summary(fit.glm)
resid(fit.glm)
?glm
fit.glm
# Fitting GLM + Geostatistic
fit.glm <- glm(crime.event ~ 1 + x + y,
data = dt.aux,
family = binomial(link = "logit"))
fit.glm
summary(fit.glm)
resid(fit.glm)
fitted(fit.glm)
dt.aux$crime.event - fitted(fit.glm)
res.aux <- dt.aux %>% mutate(Resid = dt.aux$crime.event - fitted(fit.glm),
Fitted = fitted(fit.glm))
res.aux <- dt.aux %>% mutate(Resid = dt.aux$crime.event - fitted(fit.glm),
Fitted = fitted(fit.glm))
res.aux %>%
sample_frac(1) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid))
res.aux %>%
sample_frac(1) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'gree', high = 'red')
res.aux %>%
sample_frac(1) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(Resid == near(Resid, 0)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(Resid == near(Resid, 0))
res.aux %>%
sample_frac(1) %>%
filter(Resid == near(Resid, 1))
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, 0.1, -0.1)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, 0.1, -0.1))
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, 0.2, -0.2))
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.2, 0.1))
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.1, 0.1))
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.1, 0.1)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.05, 0.05)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.05, 0.05))
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.1, 0.1)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.2, 0.2)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
filter(between(Resid, -0.1, 0.1)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
res.aux %>%
sample_frac(1) %>%
#filter(between(Resid, -0.1, 0.1)) %>%
ggplot() +
geom_point(aes(x = x, y = y, colour = Resid)) +
scale_colour_gradient(low = 'green', high = 'red')
resid(fit.glm)^2 %>% mean()
resid(fit.glm) %>% abs() %>% mean()
res.aux$Resid %>% abs() %>% mean()
res.aux$Resid^2 %>% mean()
