ptly <- dt %>%
drop_na() %>%
mutate(Vol = Vol_vec,
VaR = LaggedPrice * VaR_vec,
ES = LaggedPrice * ES_vec,
VaR_price = price + VaR,
ES_price = price + ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
#geom_path(aes(y = Vol, colour = 'Vol')) +
geom_path(aes(y = VaR_price, colour = 'VP')) +
geom_path(aes(y = ES_price, colour = 'EP')) +
scale_colour_manual(name = '',
values = c( VP = 'red',
EP = 'blue')) +
labs(title = symbol,
subtitle = 'Value-at-Risk + Expectted Shortfall através de GARCH',
caption = 'source: Yahoo Finance')
ptly %>% ggplotly()
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
# # Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
# Computing the next step forecast
## Data
`Data Prevista` <- dt$Data %>%
last(.) + 1
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(Vol = Vol_vec,
VaR = -VaR_vec,
ES = ES_vec) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = PRet)) +
geom_path(aes(y = Vol, colour = 'Volatility')) +
geom_path(aes(y = -VaR, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = -`VaR Previsto`, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = `ES Previsto`, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
ggplotly(ply)
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
VaR_forecast = `VaR Previsto` * last(dt$price)
VaR_forecast_price = last(price) + VaR_forecast
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
##################### FORECASTING VALUE-AT-RISK + EXPECTED SHORTFALL #######################
##################### ********** GARCH - NORMAL DISTRIB. ###################
p <- 0.05
g = garchFit(~garch(1,1), dt$PRet,
cond.dist = "norm", include.mean = FALSE, trace = FALSE)
# compute sigma for t + 1
sigma. = predict(g)[1,3]
# Computing the white noise from the schock from the GARCH(1,1)
# If our model is right it is supposed to
# follow the distribution from the 'cond.dist' in garchFit
epsilon.t <- (g@residuals/g@sigma.t)
# Compute VAR forecast
`VaR Previsto` = -sigma. * qnorm(p)
VaR_forecast = `VaR Previsto` * last(dt$price)
VaR_forecast_price = last(dt$price) + VaR_forecast
# Compute ES forecast under normality
`ES Previsto` = - (sigma.^2) * dnorm(-`VaR Previsto`, sd = sigma.) / p
ES_forecast = `ES Previsto` * last(dt$price)
ES_forecast_price = last(dt$price) + ES_forecast
# # Compute the fitted standard deviation series
Vol_vec <- g %>% fBasics::volatility()
VaR_vec <- Vol_vec * qnorm(p)
ES_vec <- - (Vol_vec^2) * dnorm(VaR_vec, sd = Vol_vec) / p
# Computing the next step forecast
## Data
`Data Prevista` <- dt$Data %>%
last(.) + 1
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(VaR = VaR_vec * LaggedPrice,
ES = ES_vec * LaggedPrice,
VaR_price = price + VaR,
ES_price = price + ES,
ES_forecast = `ES Previsto` * last(price)) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = VaR_price, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES_price, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = VaR_forecast_price, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = `ES Previsto`, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
# Vizualising
## VaR
ply <- dt %>%
# Adding our model to the data matrix
mutate(VaR = VaR_vec * LaggedPrice,
ES = ES_vec * LaggedPrice,
VaR_price = price + VaR,
ES_price = price + ES) %>%
ggplot(aes(x = Data)) +
geom_path(aes(y = price)) +
geom_path(aes(y = VaR_price, colour = 'Value-at-Risk')) +
geom_path(aes(y = ES_price, colour = 'Expected-Shortfall')) +
geom_point(aes(x = `Data Prevista`, y = VaR_forecast_price, colour = 'VaR Previsto')) +
geom_point(aes(x = `Data Prevista`, y = ES_forecast_price, colour = 'ES Previsto')) +
scale_colour_manual(name = '',
values = c(`Value-at-Risk` = 'red',
`Expected-Shortfall` = 'blue',
`VaR Previsto` = 'darkred',
`ES Previsto` =  'darkblue',
Volatility = 'purple')) +
labs(title = symbol,
subtitle = 'Previsão de Value-at-Risk através de GARCH',
caption = 'source: Yahoo Finance') +
theme_bw()
ggplotly(ply)
# EXECUTING THE APP
#setwd("~/Documents/")
## Global
source('sd/global.R')
## UI
source('sd/ui.R')
## Server
source('sd/server.R')
shiny::shinyApp(ui, server)
install.packages(c("aweek", "broom", "class", "colourvalues", "dbplyr", "DescTools", "fda", "ggfortify", "ggpubr", "git2r", "gss", "KernSmooth", "MASS", "modelr", "naniar", "openxlsx", "pillar", "pkgbuild", "raster", "RcppArmadillo", "recipes", "rematch2", "rex", "rlang", "sf", "systemfonts", "tibble", "tidyr", "timetk", "usethis", "withr", "xml2", "zoo"))
setwd("~/Documents/CrimeMap")
# Writing out the file in rds format
path.file <- paste('/home/adriel_martins/Documents/CrimeMap/data',
'/', 'SPcrime', crime_ano, '.rds', sep = '')
SPcrime2016 <- readRDS("~/Documents/CrimeMap/data/SPcrime2016.rds")
SPcrime2016
SPcrime2016 %>% glimpse
## Data manipulation
library(tidyverse)
## Spatial Data Manipulation
library(sf)
library(sp)
## Plotting Data
library(rgdal)
library(leaflet)
library(mapview)
hey <- read_rds(path.file)
SPcrime2016 <- readRDS("~/Documents/CrimeMap/data/SPcrime2016.rds")
SPcrime2016
hey <- 1:nrow(SPcrime2016)
full_join(SPcrime2016, hey)
full_join(SPcrime2016$Bairros, hey)
hey <- 1:nrow(SPcrime2016) %>% enframe()
full_join(SPcrime2016$Bairros, hey)
hey
full_join(SPcrime2016, hey)
hey <- tibble(hey = 1:nrow(SPcrime2016),
Bairros = SPcrime2016$Bairros)
full_join(SPcrime2016, hey)
# Visualizing Crime by Neighborhood, first attempt at a heatmap
# pal = mapviewPalette("mapviewSpectralColors")
# max.val <- max(SP$`Quant. de Crimes Cometido`)
# min.val <- min(SP$`Quant. de Crimes Cometido`)
#
mapview(SPcrime2016, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 7))
# Visualizing Crime by Neighborhood, first attempt at a heatmap
SP <- SPcrime2016
pal = mapviewPalette("mapviewSpectralColors")
max.val <- max(SP$`Número de Crimes em 2016`)
min.val <- min(SP$`Número de Crimes em 2016`)
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 7))
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 6))
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 10))
max.val <- max(SP$`Número de Crimes em 2016`)
min.val <- min(SP$`Número de Crimes em 2016`)
SP$geometry
full_join(SPcrime2016, hey)
SPcrime2016 <- readRDS("~/Documents/CrimeMap/data/SPcrime2016.rds")
SPcrime2016 %>% select(-geometry)
SPcrime2016 %>% as.data.frame()
SPcrime2016 %>% as_tibble()
SPcrime2016 %>% as_tibble() %>% select(-geometry)
SPcrime2016 %>% as_tibble() %>% select(-geometry) %>% glimpse()
SP %>% as_tibble() %>% select(Bairros)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSPKaagle1.csv")
###################### ****************** Initial Data Exploring ######################
# # Understandig the geo-tag of our crime dataset
# crime %>%
#   # Interpreting as double the lat-long coordinates, and month as integer
#   mutate(Index = 1: n(),
#          latitude = as.double(latitude),
#          longitude = as.double(longitude),
#          mes = as.integer(mes)) %>%
#   filter(is.na(latitude) | is.na(longitude)) %>%
#   summarise(WithoutLatLongCoord = n(),
#             WithLatLongCoord = nrow(crime) - n(),
#             PropWithout = WithoutLatLongCoord/nrow(crime),
#             PropWith = WithLatLongCoord/nrow(crime))
# # Cities where crime was recorded
# crime %>% pull(cidade) %>% str_to_lower() %>% unique()
# # Number of crimes in the city of Sao Paulo
# crime %>% filter(cidade == 'S.PAULO') %>% nrow()
# # Different types of crime in SP and their respective quantity
# crime %>% group_by(rubrica) %>% summarise(Count = n())
# crime$rubrica %>% unique()
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'São Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
# Calculating bounding box for further wrangling
boundbox.sp <- sp.sf$geometry %>% sf::as_Spatial() %>% bbox()
# Storing the date of every year
crime_ano <- crime$ANO_BO %>% unique() %>% .[1]
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime <- crime %>%
# Filtering just for the year of 2016
filter(ANO_BO == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, CIDADE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us exclude the points that are not in the bounding box of the City of São Paulo
filter(between(latitude, boundbox.sp[2,1], boundbox.sp[2,2]) &
between(longitude, boundbox.sp[1,1], boundbox.sp[1,2])) %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
# Let us put our crime dataset into a proper spatial format
crime_sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
crime_sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
# With just point coordinates
crime_sf <- crime_sp %>% st_as_sf()
# Adding the type of crime commited
crime_sf$rubrica <- crime$rubrica
crime_sf$mes <- crime$mes
# Changing the name of our variable for plotting
SP <- sp.sf
# Counting how many crimes happened in the year
x <- paste('Número de Crimes em', crime_ano)
SP$bairros_crime_n <- lengths(st_contains(SP, crime_sf))
SP <- SP %>%
rename_at(.vars = vars(bairros_crime_n), .funs = ~x)
# Counting how many crimes happened just in each month
order_month <- unique(crime$mes) %>% sort()
for(i in order_month){
# Selecting the crime_points of each month
crime_month <- crime_sf %>% filter(mes == i)
# Counting how many there are in each neighborhood by month
bairros_crime_n <- lengths(st_contains(SP, crime_month))
# Binding those two together and changing the name to the respective month
x <- paste('Número de Crimes em', i, crime_ano)
SP$bairros_crime_n <- bairros_crime_n
SP <- SP %>%
rename_at(.vars = vars(bairros_crime_n), .funs = ~x)
}
# Writing out the file in rds format
path.file <- paste('/home/adriel_martins/Documents/CrimeMap/data',
'/', 'SPcrimetibble', crime_ano, '.rds', sep = '')
SP %>% as_tibble() %>% select(Bairros) %>% write_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
SP %>% select(-geometry) %>% write_rds(path.file)
SP <- read_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
hey <- read_rds(path.file)
full_join(SP, hey) %>% glimpse()
# Writing out the file in rds format
crime_ano <- 2016
path.file <- paste('/home/adriel_martins/Documents/CrimeMap/data',
'/', 'SPcrimetibble', crime_ano, '.rds', sep = '')
# Just the coordinates
SP <- read_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
# Joining the dataframe with the coordinates
hey <- read_rds(path.file)
SPcrime <- full_join(SP, hey) %>% glimpse()
pal = mapviewPalette("mapviewSpectralColors")
max.val <- max(SP$`Número de Crimes em 2016`)
min.val <- min(SP$`Número de Crimes em 2016`)
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 6))
max.val <- max(SP$`Número de Crimes em 2016`)
SP %>% is.na() %>% sum()
# Visualizing Crime by Neighborhood, first attempt at a heatmap
SP <- SPcrime
pal = mapviewPalette("mapviewSpectralColors")
max.val <- max(SP$`Número de Crimes em 2016`)
min.val <- min(SP$`Número de Crimes em 2016`)
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 6))
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 6), at = seq(min.val, max.val, l = 10))
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 6), at = seq(min.val, max.val, l = 10))
SP %>% class()
read_sf(SPcrime)
## Spatial Data Manipulation
library(sf)
mapview(SP, zcol = 'Número de Crimes em 2016',
col.regions = pal(n = 6), at = seq(min.val, max.val, l = 10))
SP %>% glimpse()
SP %>% read_sf()
SP$geometry %>% read_sf()
read_sf('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
st_drivers()
SP %>% as_Spatial()
SP$geometry %>% as_Spatial()
SP$geometry %>% as_Spatial() %>% st_as_sf()
SP <- SP$geometry %>% as_Spatial() %>% st_as_sf()
SPcrime <- full_join(SP, hey)
# Just the coordinates
SP <- read_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
SP %>% as_Spatial() %>% st_as_sf()
SP %>% as_Spatial(cast = T)
SP %>% as_Spatial(IDs = geometry) %>% st_as_sf()
SP$geometry <- SP %>% as_Spatial() %>% st_as_sf()
# Just the coordinates
SP <- read_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
SP$geometry <- SP$geometry %>% as_Spatial() %>% st_as_sf()
SP
# Just the coordinates
SP <- read_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
SP
SPcrimetibble2016 <- readRDS("~/Documents/CrimeMap/data/SPcrimetibble2016.rds")
SPcrimetibble2016
SP <- readRDS("~/Documents/CrimeMap/data/SP.rds")
View(SP)
SPcrimetibble2016 <- readRDS("~/Documents/CrimeMap/data/SPcrimetibble2016.rds")
View(SPcrimetibble2016)
View(SPcrimetibble2016)
SPcrimetibble2016 %>% class()
SPcrimetibble2016 %>% select(Bairros, geometry)
SPcrimetibble2016 %>%
select(Bairros, geometry) %>%
write_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
SP <- readRDS("~/Documents/CrimeMap/data/SP.rds")
View(SP)
# Just the coordinates
SP <- read_rds('/home/adriel_martins/Documents/CrimeMap/data/SP.rds')
SP %>% class()
SP
SP %>% as_Spatial()
hey <- SP %>% as_Spatial()
View(hey)
hey <- SP %>% as_Spatial() %>% st_as_sf()
hey
hey <- SP %>% as_Spatial()
oi <- SPcrimetibble2016 %>% as_Spatial()
hey
oi
oi <- SPcrimetibble2016 %>% select(-geometry)
oi
oi %>% class()
oi %>% as_tibble()
oi %>% as_tibble() %>% glimpse()
SPcrimetibble2016 %>% as_tibble() %>% select(-geometry) %>% glimpse()
oi <- SPcrimetibble2016 %>% as_tibble() %>% select(-geometry)
oi
hey
full_join(hey, oi)
hey$'xau' <- oi$`Número de Crimes em 2016`
hey
SP <- readRDS("~/Documents/CrimeMap/data/SP.rds")
SPcrimetibble2016 <- readRDS("~/Documents/CrimeMap/data/SPcrimetibble2016.rds")
View(SP)
SP
View(SPcrimetibble2016)
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
# Reading Data from the SSP, which was on Kaagle.
crime <- read_csv("data_pre_processed/SSPKaagle1.csv")
###################### ****************** Initial Data Exploring ######################
# # Understandig the geo-tag of our crime dataset
# crime %>%
#   # Interpreting as double the lat-long coordinates, and month as integer
#   mutate(Index = 1: n(),
#          latitude = as.double(latitude),
#          longitude = as.double(longitude),
#          mes = as.integer(mes)) %>%
#   filter(is.na(latitude) | is.na(longitude)) %>%
#   summarise(WithoutLatLongCoord = n(),
#             WithLatLongCoord = nrow(crime) - n(),
#             PropWithout = WithoutLatLongCoord/nrow(crime),
#             PropWith = WithLatLongCoord/nrow(crime))
# # Cities where crime was recorded
# crime %>% pull(cidade) %>% str_to_lower() %>% unique()
# # Number of crimes in the city of Sao Paulo
# crime %>% filter(cidade == 'S.PAULO') %>% nrow()
# # Different types of crime in SP and their respective quantity
# crime %>% group_by(rubrica) %>% summarise(Count = n())
# crime$rubrica %>% unique()
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'São Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
# Calculating bounding box for further wrangling
boundbox.sp <- sp.sf$geometry %>% sf::as_Spatial() %>% bbox()
# Storing the date of every year
crime_ano <- crime$ANO_BO %>% unique() %>% .[1]
# Let us modify the data as we see fit
# For our purposes, we need the precise location, so let's clean the data without geotag.
crime <- crime %>%
# Filtering just for the year of 2016
filter(ANO_BO == '2016') %>%
# Selecting what we want
select(LATITUDE, LONGITUDE, CIDADE, MES, RUBRICA) %>%
# Just because I prefer lower case letters
`colnames<-`(., str_to_lower(colnames(.))) %>%
# Interpreting as double the lat-long coordinates
mutate(latitude = as.double(latitude),
longitude = as.double(longitude),
# Changing the name of each month to it's text counterpart
mes = lubridate::month(mes, label = T)) %>%
# Dropping observations without lon-lat
drop_na() %>%
# Let us exclude the points that are not in the bounding box of the City of São Paulo
filter(between(latitude, boundbox.sp[2,1], boundbox.sp[2,2]) &
between(longitude, boundbox.sp[1,1], boundbox.sp[1,2])) %>%
# Let us also aggregate crime, by taking out the 'A.I'.
mutate(rubrica = str_replace_all(rubrica, 'A.I.-', ''))
# Let us put our crime dataset into a proper spatial format
crime_sp <- crime %>% select(longitude, latitude) %>% SpatialPoints()
crime_sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
# With just point coordinates
crime_sf <- crime_sp %>% st_as_sf()
# Adding the type of crime commited
crime_sf$rubrica <- crime$rubrica
crime_sf$mes <- crime$mes
# Changing the name of our variable for plotting
SP <- sp.sf
# Counting how many crimes happened in the year
x <- paste('Número de Crimes em', crime_ano)
SP$bairros_crime_n <- lengths(st_contains(SP, crime_sf))
SP <- SP %>%
rename_at(.vars = vars(bairros_crime_n), .funs = ~x)
# Counting how many crimes happened just in each month
order_month <- unique(crime$mes) %>% sort()
for(i in order_month){
# Selecting the crime_points of each month
crime_month <- crime_sf %>% filter(mes == i)
# Counting how many there are in each neighborhood by month
bairros_crime_n <- lengths(st_contains(SP, crime_month))
# Binding those two together and changing the name to the respective month
x <- paste('Número de Crimes em', i, crime_ano)
SP$bairros_crime_n <- bairros_crime_n
SP <- SP %>%
rename_at(.vars = vars(bairros_crime_n), .funs = ~x)
}
# Writing out the file in rds format
path.file <- paste('/home/adriel_martins/Documents/CrimeMap/data',
'/', 'SPcrimetibble', crime_ano, '.rds', sep = '')
SP %>% as_tibble() %>% select(-geometry) %>% write_rds(path.fil)
setwd("~/Documents/CrimeMap")
