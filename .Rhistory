oz.utm <- cbind(oz.gstat@coords, oz.gstat@data) %>%
as_tibble() %>%
rename(x = lat,
y = long)
oz.geo <- oz.utm %>%
as.geodata()
a <- variog.geodesic(oz, distance = 'haversine')
oz <-
res.aux %>%
rename(value = Resid,
lat = x,
long = y) %>%
select(long, lat, value) %>%
sample_n(50)
# Transforming to SpatialDataFrame
oz.gstat <- oz %>% `coordinates<-`(c('long', 'lat'))
oz.gstat <- LongLatToUTM(sp_dt = oz.gstat, zone = 23)
# Transforming to SpatialDataFrame
oz.gstat <- oz %>% `coordinates<-`(c('long', 'lat'))
oz.gstat <- LongLatToUTM(sp_dt = oz.gstat, zone = 23)
oz.gstat
oz.gstat@coords
# Transforming to UTM coord
oz.utm <- cbind(oz.gstat@coords, oz.gstat@data) %>%
as_tibble() %>%
rename(x = lat,
y = long)
# Transforming to UTM coord
oz.utm <- cbind(oz.gstat@coords, oz.gstat@data) %>%
as_tibble() %>%
rename(x = lat,
y = long) %>%
`coordinates<-`(c('y', 'x'))
# Our empirical variogram
v <- variogram(value ~ 1, oz.utm)
plot(v)
source('/home/adriel_martins/Documents/rcodes/[R]Spatial_Codes/Geostatistics/my_codes/LongLat_UTM.R')
oz <-
res.aux %>%
rename(value = Resid,
lat = x,
long = y) %>%
select(long, lat, value) %>%
sample_n(100)
# Transforming to SpatialDataFrame
oz.gstat <- oz %>% `coordinates<-`(c('long', 'lat'))
oz.gstat <- LongLatToUTM(sp_dt = oz.gstat, zone = 23)
# Transforming to UTM coord
oz.utm <- cbind(oz.gstat@coords, oz.gstat@data) %>%
as_tibble() %>%
rename(x = lat,
y = long) %>%
`coordinates<-`(c('y', 'x'))
# Our empirical variogram
v <- variogram(value ~ 1, oz.utm)
plot(v)
# Our empirical variogram
v <- variogram(value ~ 1, oz.utm)
plot(v)
dt.aux <- readRDS('/data/crime_by_square/squares_100.rds')
setwd("~/Documents/CrimeMap")
dt.aux <- readRDS('/data/crime_by_square/squares_100.rds')
dt.aux <- readRDS('data/crime_by_square/squares_100.rds')
dt.aux$crime.event %>% hist()
# ***************** Libraries
# Data manipulation
library(tidyverse)
# Spatial Data Manipulation
library(sp)
library(sf)
library(rgdal)
library(spatstat)
library(maptools)
dt.aux <- readRDS('data/crime_by_square/squares_100.rds')
dt.aux$crime.event %>% hist()
yes.cr <- dt.aux %>%
filter(crime.event == 1) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
no.cr <- dt.aux %>%
filter(crime.event == 0) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
yes.cr %>% summary()
no.cr %>% summary()
plot(no.cr)
plot(yes.cr)
plot(no.cr)
plot(yes.cr)
# Kernel Density smoothing
#bw.diggle(crime.ppp) %>% plot()
a1 <- density(yes.cr, sigma = bw.diggle)
a2 <- density(no.cr, sigma = bw.diggle)
a1 %>% plot()
points(yes.cr)
z1 <- (a1$v)/(a1$v + a2$v)
a1$v <- z1
a1 %>% plot()
# Kernel Density smoothing
#bw.diggle(crime.ppp) %>% plot()
a1 <- density(yes.cr, sigma = bw.diggle)
a1.1 <- a1
a2 <- density(no.cr, sigma = bw.diggle)
a1 %>% plot()
z1 <- (a1$v)/(a1$v + a2$v)
a1.1$v <- z1
a1 %>% plot()
a1.1 %>% plot()
dt.aux <- readRDS('data/crime_by_square/squares_500.rds')
dt.aux$crime.event %>% hist()
yes.cr <- dt.aux %>%
filter(crime.event == 1) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
no.cr <- dt.aux %>%
filter(crime.event == 0) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
yes.cr %>% summary()
# Kernel Density smoothing
#bw.diggle(crime.ppp) %>% plot()
a1 <- density(yes.cr, sigma = bw.diggle)
a1.1 <- a1
a2 <- density(no.cr, sigma = bw.diggle)
a1 %>% plot()
points(yes.cr)
z1 <- (a1$v)/(a1$v + a2$v)
a1.1$v <- z1
a1.1 %>% plot()
# 3d plot
fig <- plotly::plot_ly(z = ~z2)
fig <- fig %>% plotly::add_surface()
fig
dt.aux <- readRDS('data/crime_by_square/squares_500.rds')
dt.aux$crime.event %>% hist()
yes.cr <- dt.aux %>%
filter(crime.event == 1) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
no.cr <- dt.aux %>%
filter(crime.event == 0) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
yes.cr %>% summary()
no.cr %>% summary()
plot(no.cr)
plot(yes.cr)
# Kernel Density smoothing
#bw.diggle(crime.ppp) %>% plot()
a1 <- density(yes.cr, sigma = bw.diggle)
a1.1 <- a1
a2 <- density(no.cr, sigma = bw.diggle)
a1 %>% plot()
points(yes.cr)
z1 <- (a1$v)/(a1$v + a2$v)
a1.1$v <- z1
a1.1 %>% plot()
b1 <- adaptive.density(yes.cr, f=0.1, nrep=10)
b2 <- adaptive.density(no.cr, f=0.1, nrep=10)
b1 %>% plot()
b2 %>% plot()
z2 <- (b1$v)/(b1$v + b2$v)
b1$v <- z2
b1 %>% plot()
z2 %>% dim()
# 3d plot
fig <- plotly::plot_ly(z = ~z2)
fig <- fig %>% plotly::add_surface()
fig
dt.aux <- readRDS('data/crime_by_square/squares_500.rds')
dt.aux$crime.event %>% hist()
yes.cr <- dt.aux %>%
filter(crime.event == 1) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
no.cr <- dt.aux %>%
filter(crime.event == 0) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
yes.cr %>% summary()
no.cr %>% summary()
plot(no.cr)
plot(yes.cr)
dt.aux <- readRDS('data/crime_by_square/squares_500.rds')
dt.aux$crime.event %>% hist()
yes.cr <- dt.aux %>%
filter(crime.event == 1) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
no.cr <- dt.aux %>%
filter(crime.event == 0) %>%
select(x, y, crime.event) %>%
SpatialPoints() %>%
as('ppp')
yes.cr %>% summary()
no.cr %>% summary()
plot(no.cr)
plot(yes.cr)
a1 <- density(yes.cr, sigma = bw.diggle)
a1.1 <- a1
a2 <- density(no.cr, sigma = bw.diggle)
a1 %>% plot()
points(yes.cr)
z1 <- (a1$v)/(a1$v + a2$v)
a1.1$v <- z1
a1.1 %>% plot()
# 3d plot
fig <- plotly::plot_ly(z = ~z1)
fig <- fig %>% plotly::add_surface()
fig
b1 <- adaptive.density(yes.cr, f=0.1, nrep=10)
b2 <- adaptive.density(no.cr, f=0.1, nrep=10)
b1 %>% plot()
b2 %>% plot()
z2 <- (b1$v)/(b1$v + b2$v)
b1$v <- z2
b1 %>% plot()
z2 %>% dim()
dt.aux
b2 <- adaptive.density(no.cr, f=0.1, nrep=10)
## Spatial Adaptive Density
b1 <- adaptive.density(yes.cr, f=0.1, nrep=5)
b2 <- adaptive.density(no.cr, f=0.1, nrep=5)
## Spatial Adaptive Density
b1 <- adaptive.density(yes.cr, f=0.05, nrep=5)
b2 <- adaptive.density(no.cr, f=0.05, nrep=5)
b1.1 <- b1
b1 %>% plot()
b2 %>% plot()
z2 <- (b1$v)/(b1$v + b2$v)
b1.1$v <- z2
b1.1 %>% plot()
z2 %>% dim()
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
emp_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
###################### ****************** Reading Data ######################
# GADM Geospatial data from GADM, mapping the whole of Brazil
brazil.sf <- readRDS('data_pre_processed/gadm36_BRA_3_sf.rds')
###################### ****************** Data Wrangling ######################
# Filtering our Map of Brazil into the Map of the City of Sao Paulo.
sp.sf <- brazil.sf %>%
filter(NAME_2 == 'SÃ£o Paulo') %>%
select(NAME_3) %>%
# Renaming
rename(Bairros = NAME_3)
sp.sp <- sp.sf %>% as_Spatial()
sp.sp@proj4string <- CRS('+proj=longlat +datum=WGS84 +no_defs')
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
emp_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
#emp_raster <- coordinates(emp_raster)
fil_raster@file@toptobottom <- TRUE
emp_raster <- coordinates(emp_raster)
fil_raster@file@toptobottom <- TRUE
fil_raster <- raster::setValues(x = emp_raster, z2)
fil_raster <- raster::setValues(x = emp_raster, z2)
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
emp_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
emp_raster <- coordinates(emp_raster)
fil_raster <- raster::setValues(x = emp_raster, z2)
fil_raster <- raster::setValues(x = emp_raster, z2)
fil_raster@file@toptobottom <- TRUE
fil_raster <- raster::setValues(x = emp_raster, z2)
fil_raster@file@toptobottom <- TRUE
library(raster)
?setValues()
?setValues
values(emp_raster) <- z2
# Create an empty raster with the same extent and resolution as the bioclimatic layers
latitude_raster <- longitude_raster <- raster::raster(nrows = 100,
ncols = 100,
ext = raster::extent(sp.sp))
coordinates(longitude_raster)[,1]
coordinates(emp_raster)
z2
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
emp_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
emp_raster[] <- z2
plot(emp_raster)
emp_raster[] <- t(z2)
plot(emp_raster)
emp_raster[] <- z2
emp_raster[] <- z2
plot(emp_raster)
plot(emp_raster)
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
predicted_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
predicted_raster[] <- z2
plot(emp_raster)
predicted_raster_in_map <- raster::mask(predicted_raster, sp.sp)
plot(predicted_raster_in_map)
rev(z2)
predicted_raster[] <- rev(z2)
plot(emp_raster)
predicted_raster[] <- rev(z2)
plot(emp_raster)
predicted_raster[] <- z2 #rev(z2)
plot(emp_raster)
b <- apply(z2, 2, rev)
predicted_raster[] <- b
plot(emp_raster)
b == z2
b <- apply(z2, 2, rev)
predicted_raster[] <- b
plot(emp_raster)
predicted_raster[] <- z2
plot(emp_raster)
predicted_raster[] <- z2
predicted_raster@rotation@geotrans
predicted_raster@z
predicted_raster@file
predicted_raster@file@toptobottom
predicted_raster@file@toptobottom <- FALSE
plot(emp_raster)
predicted_raster[] <- z2
plot(emp_raster)
predicted_raster[] <- z2
predicted_raster@file@toptobottom
plot(emp_raster)
predict(predicted_raster, z2)
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
predicted_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
setValues(predicted_raster, z2)
plot(predicted_raster)
setValues(predicted_raster, z2)
plot(a)
a <- setValues(predicted_raster, z2)
plot(a)
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
predicted_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
a <- setValues(predicted_raster, z2)
plot(a)
z2[nrow(z2):1,]
a <- setValues(predicted_raster, z2[nrow(z2):1,])
plot(a)
# Create an empty raster with the same extent and resolution as the Sao Paulo region
predicted_raster <- raster::raster(nrows = nrow(z2),
ncols = ncol(z2),
ext = raster::extent(sp.sp))
# For some reason, the raster takes the inverse order
predicted_raster[] <- z2[nrow(z2):1,]
plot(predicted_raster)
predicted_raster_in_map <- raster::mask(predicted_raster, sp.sp)
plot(predicted_raster_in_map)
predicted_raster_in_map@data
predicted_raster_in_map@data@values
# 3d plot
fig <- plotly::plot_ly(z = ~predicted_raster_in_map@data@values)
fig <- fig %>% plotly::add_surface()
fig
predicted_raster_in_map@data@values
predicted_raster_in_map@data@values %>% class
# 3d plot
fig <- plotly::plot_ly(z = ~predicted_raster_in_map@data@values)
fig <- fig %>% plotly::add_surface()
fig
# 3d plot
fig <- plotly::plot_ly(z = ~ as.numeric(predicted_raster_in_map@data@values))
fig <- fig %>% plotly::add_surface()
fig
as.numeric(predicted_raster_in_map@data@values)
as.numeric(predicted_raster_in_map@data@values)
predicted_raster_in_map@data@values)
predicted_raster_in_map@data@values
hey <- predicted_raster_in_map@data@values
# 3d plot
fig <- plotly::plot_ly(z = ~ hey)
fig <- fig %>% plotly::add_surface()
fig
hey <- predicted_raster_in_map@data@values
predicted_raster_in_map@data@values
hey <- predicted_raster_in_map@data@values %>% as.vector()
# 3d plot
fig <- plotly::plot_ly(z = ~ hey)
fig <- fig %>% plotly::add_surface()
fig
predicted_raster_in_map %>% coordinates()
plot.tibble <- tibble(Map = predicted_raster_in_map@data@values %>% as.vector(),
Coord.x = coordinates(predicted_raster_in_map)[,1],
Coord.y = coordinates(predicted_raster_in_map)[,2])
# 3d plot
library(rayshader)
# 3d plot
plot.tibble <- tibble(Map = predicted_raster_in_map@data@values %>% as.vector(),
x = coordinates(predicted_raster_in_map)[,1],
y = coordinates(predicted_raster_in_map)[,2])
#Lines
pp = ggplot(plot.tibble, aes(x = x, y = y)) +
geom_hex(aes(colour = Map)) +
scale_fill_viridis_c(option = "C")
#Lines
ggplot(plot.tibble, aes(x = x, y = y)) +
geom_hex(aes(colour = Map)) +
scale_fill_viridis_c(option = "C")
#Lines
ggplot(plot.tibble, aes(x = x, y = y)) +
geom_point(aes(colour = Map))
#Lines
ggplot(plot.tibble, aes(x = x, y = y)) +
geom_tile(aes(colour = Map))
#Lines
plot.tibble %>%
drop_na() %>%
ggplot(aes(x = x, y = y)) +
geom_tile(aes(colour = Map))
#Lines
plot.tibble %>%
drop_na() %>%
ggplot(aes(x = x, y = y)) +
geom_raster(aes(colour = Map))
#Lines
plot.tibble %>%
drop_na() %>%
ggplot(aes(x = x, y = y)) +
geom_raster(aes(fill = Map))
#Lines
pp = plot.tibble %>%
drop_na() %>%
ggplot(aes(x = x, y = y)) +
geom_raster(aes(fill = Map))
par(mfrow = c(1, 2))
plot_gg(pp, width = 5, height = 4, scale = 300, raytrace = FALSE, preview = TRUE)
plot_gg(pp, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
#Lines
gg = plot.tibble %>%
drop_na() %>%
ggplot(aes(x = x, y = y)) +
geom_raster(aes(fill = Map)) +
theme_bw()
gg
plot_gg(gg, multicore = TRUE, width = 6 ,height=2.7, fov = 70)
install.packages('magick')
plot_gg(gg, multicore = TRUE, width = 6, height=6, fov = 70)
render_depth(focallength=100,focus=0.72)
## Plotly
fig <- plotly::plot_ly(z = ~ plot.tibble[c('x', 'y')])
fig <- fig %>% plotly::add_surface()
fig
## Plotly
fig <- plotly::plot_ly(z = ~ drop_na(plot.tibble[c('x', 'y')]))
fig <- fig %>% plotly::add_surface()
fig
drop_na(plot.tibble[c('x', 'y')])
## Plotly
fig <- plotly::plot_ly(z = ~ as.matrix(drop_na(plot.tibble[c('x', 'y')])))
fig <- fig %>% plotly::add_surface()
fig
# 3d plot
plot.tibble <- tibble(Mapa = predicted_raster_in_map@data@values %>% as.vector(),
x = coordinates(predicted_raster_in_map)[,1],
y = coordinates(predicted_raster_in_map)[,2])
## Plotly
matrix(data = as.vector(plot.tibble$Mapa), 128, 128)
## Plotly
plotly.matrix <- matrix(data = as.vector(plot.tibble$Mapa), 128, 128)
fig <- plotly::plot_ly(z = ~ )
fig <- plotly::plot_ly(z = ~ plotly.matrix)
fig <- fig %>% plotly::add_surface()
fig
## Plotly
plotly.matrix <- matrix(data = as.vector(plot.tibble$Mapa), nrow(z2), ncol(z2))
fig <- plotly::plot_ly(z = ~ plotly.matrix)
fig <- fig %>% plotly::add_surface()
fig
# Kernel Density smoothing
## Diggle bandwith
a1 <- density(yes.cr, sigma = bw.diggle)
a1.1 <- a1
a2 <- density(no.cr, sigma = bw.diggle)
z1 <- (a1$v)/(a1$v + a2$v)
a1.1$v <- z1
# Raster Plot
# Create an empty raster with the same extent and resolution as the Sao Paulo region
predicted_raster <- raster::raster(nrows = nrow(z1),
ncols = ncol(z1),
ext = raster::extent(sp.sp))
# For some reason, the raster takes the inverse order of rows
predicted_raster[] <- z1[nrow(z1):1,]
plot(predicted_raster)
predicted_raster_in_map <- raster::mask(predicted_raster, sp.sp)
